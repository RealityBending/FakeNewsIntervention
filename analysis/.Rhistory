# Calculate the average confidence for posttest questions answered incorrectly
posttest_incorrect_confidence = rowMeans(
select(df_wide, starts_with("Posttest") & ends_with("binary_confidence"))[
, which(select(df_wide, starts_with("Posttest") & ends_with("binary_confidence")) == 0)
], na.rm = TRUE
),
# Calculate the average confidence for all posttest questions
posttest_overall_confidence = rowMeans(
select(df_wide, starts_with("Posttest") & ends_with("binary_confidence")), na.rm = TRUE
)
)
df_wide <- df_wide %>%
mutate(
pretest_correct_confidence = rowMeans(
select(df_wide, starts_with("Pretest") & ends_with("binary_confidence")) *
ifelse(select(df_wide, starts_with("Pretest") & ends_with("binary")) == 1, 1, 0),
na.rm = TRUE
),
pretest_incorrect_confidence = rowMeans(
select(df_wide, starts_with("Pretest") & ends_with("binary_confidence")) *
ifelse(select(df_wide, starts_with("Pretest") & ends_with("binary")) == 0, 1, 0),
na.rm = TRUE
),
pretest_overall_confidence = rowMeans(
select(df_wide, starts_with("Pretest") & ends_with("binary_confidence")),
na.rm = TRUE
),
posttest_correct_confidence = rowMeans(
select(df_wide, starts_with("Posttest") & ends_with("binary_confidence")) *
ifelse(select(df_wide, starts_with("Posttest") & ends_with("binary")) == 1, 1, 0),
na.rm = TRUE
),
posttest_incorrect_confidence = rowMeans(
select(df_wide, starts_with("Posttest") & ends_with("binary_confidence")) *
ifelse(select(df_wide, starts_with("Posttest") & ends_with("binary")) == 0, 1, 0),
na.rm = TRUE
),
posttest_overall_confidence = rowMeans(
select(df_wide, starts_with("Posttest") & ends_with("binary_confidence")),
na.rm = TRUE
)
)
df_wide <- df_wide %>%
mutate(
# Correct confidence scores (pretest)
pretest_correct_confidence = rowMeans(
select(df_wide, starts_with("Pretest") & ends_with("binary_confidence")) *
ifelse(select(df_wide, starts_with("Pretest") & ends_with("binary")) == 1, 1, 0),
na.rm = TRUE
),
# Incorrect confidence scores (pretest)
pretest_incorrect_confidence = rowMeans(
select(df_wide, starts_with("Pretest") & ends_with("binary_confidence")) *
ifelse(select(df_wide, starts_with("Pretest") & ends_with("binary")) == 0, 1, 0),
na.rm = TRUE
),
# Overall confidence (pretest)
pretest_overall_confidence = rowMeans(
select(df_wide, starts_with("Pretest") & ends_with("binary_confidence")),
na.rm = TRUE
),
# Correct confidence scores (posttest)
posttest_correct_confidence = rowMeans(
select(df_wide, starts_with("Posttest") & ends_with("binary_confidence")) *
ifelse(select(df_wide, starts_with("Posttest") & ends_with("binary")) == 1, 1, 0),
na.rm = TRUE
),
# Incorrect confidence scores (posttest)
posttest_incorrect_confidence = rowMeans(
select(df_wide, starts_with("Posttest") & ends_with("binary_confidence")) *
ifelse(select(df_wide, starts_with("Posttest") & ends_with("binary")) == 0, 1, 0),
na.rm = TRUE
),
# Overall confidence (posttest)
posttest_overall_confidence = rowMeans(
select(df_wide, starts_with("Posttest") & ends_with("binary_confidence")),
na.rm = TRUE
)
)
df_wide <- df_wide %>%
# Correct confidence scores for pretest (answered correctly)
mutate(
pretest_correct_confidence = rowMeans(
select(df_wide, starts_with("Pretest") & ends_with("binary_confidence")) *
(select(df_wide, starts_with("Pretest") & ends_with("binary")) == 1),
na.rm = TRUE
),
# Incorrect confidence scores for pretest (answered incorrectly)
pretest_incorrect_confidence = rowMeans(
select(df_wide, starts_with("Pretest") & ends_with("binary_confidence")) *
(select(df_wide, starts_with("Pretest") & ends_with("binary")) == 0),
na.rm = TRUE
),
# Overall confidence scores for pretest (all answers, not based on correctness)
pretest_overall_confidence = rowMeans(
select(df_wide, starts_with("Pretest") & ends_with("binary_confidence")),
na.rm = TRUE
),
# Correct confidence scores for posttest (answered correctly)
posttest_correct_confidence = rowMeans(
select(df_wide, starts_with("Posttest") & ends_with("binary_confidence")) *
(select(df_wide, starts_with("Posttest") & ends_with("binary")) == 1),
na.rm = TRUE
),
# Incorrect confidence scores for posttest (answered incorrectly)
posttest_incorrect_confidence = rowMeans(
select(df_wide, starts_with("Posttest") & ends_with("binary_confidence")) *
(select(df_wide, starts_with("Posttest") & ends_with("binary")) == 0),
na.rm = TRUE
),
# Overall confidence scores for posttest (all answers, not based on correctness)
posttest_overall_confidence = rowMeans(
select(df_wide, starts_with("Posttest") & ends_with("binary_confidence")),
na.rm = TRUE
)
)
#| message: false
#| warning: false
library(tidyverse)
library(easystats)
library(patchwork)
library(ggside)
library(modelsummary)
#| code-fold: false
df <- read.csv("../data/rawdata.csv")  |>
mutate(Intervention = ifelse(!is.na(Badnews_Questions_Duration), "BadNews", "Tetris")) |>
select(-Prolific_ID, -Date_OSF, -BadNews_Duration)
#| code-fold: false
df <- read.csv("../data/rawdata.csv")  |>
select(-Prolific_ID, -Date_OSF)
#| code-fold: false
df <- read.csv("../data/rawdata.csv")  |>
dfmist <- read.csv("../data/rawdata_mist.csv")
#| code-fold: false
df <- read.csv("../data/rawdata.csv")
dfmist <- read.csv("../data/rawdata_mist.csv")
# Ensure 'Intervention_Questions_Score' is numeric and remove invalid rows
df$Intervention_Questions_Score <- as.numeric(df$Intervention_Questions_Score)
df_clean <- na.omit(df)  # Remove rows with NA in any column
# Generate summary statistics with modelsummary
library(modelsummary)
datasummary_skim(df_clean ~ Intervention)
# Ensure 'Intervention_Questions_Score' is numeric and remove invalid rows
df$Intervention_Questions_Score <- as.numeric(df$Intervention_Questions_Score)
df_clean <- na.omit(df)  # Remove rows with NA in any column
# Generate summary statistics with modelsummary (corrected usage)
library(modelsummary)
datasummary_skim(df_clean, by = "Intervention")
# Ensure 'Intervention_Questions_Score' is numeric and remove invalid rows
df$Intervention_Questions_Score <- as.numeric(df$Intervention_Questions_Score)
df_clean <- na.omit(df)  # Remove rows with NA in any column
# Generate summary statistics with modelsummary (corrected usage)
library(modelsummary)
datasummary_skim(Intervention_Questions_Score ~ Intervention, data = df_clean)
# Ensure 'Intervention_Questions_Score' is numeric and remove invalid rows
df$Intervention_Questions_Score <- as.numeric(df$Intervention_Questions_Score)
df_clean <- na.omit(df)  # Remove rows with NA in any column
# Generate summary statistics for 'Intervention_Questions_Score' grouped by 'Intervention'
library(modelsummary)
datasummary_skim(df_clean[, c("Intervention_Questions_Score", "Intervention")])
# Ensure 'Intervention_Questions_Score' is numeric and remove invalid rows
df$Intervention_Questions_Score <- as.numeric(df$Intervention_Questions_Score)
df_clean <- na.omit(df)  # Remove rows with NA in any column
# Generate summary statistics for 'Intervention_Questions_Score' by 'Intervention'
library(modelsummary)
summary_stats <- modelsummary::datasummary_skim(df_clean[, c("Intervention_Questions_Score", "Intervention")], output = "data.frame")
# Display the summary as a clean dataframe
print(summary_stats)
# Ensure 'Intervention_Questions_Score' is numeric and remove invalid rows
df$Intervention_Questions_Score <- as.numeric(df$Intervention_Questions_Score)
df_clean <- na.omit(df)  # Remove rows with NA in any column
# Generate summary statistics for 'Intervention_Questions_Score' by 'Intervention'
library(dplyr)
summary_stats <- df_clean %>%
group_by(Intervention) %>%
summarise(
Mean = mean(Intervention_Questions_Score, na.rm = TRUE),
SD = sd(Intervention_Questions_Score, na.rm = TRUE),
Min = min(Intervention_Questions_Score, na.rm = TRUE),
Max = max(Intervention_Questions_Score, na.rm = TRUE)
)
# Display the summary statistics
print(summary_stats)
# Ensure 'Intervention_Questions_Score' is numeric and remove invalid rows
df$Intervention_Questions_Score <- as.numeric(df$Intervention_Questions_Score)
df_clean <- na.omit(df)  # Remove rows with NA in any column
# Generate summary statistics for 'Intervention_Questions_Score' by 'Intervention'
library(dplyr)
summary_stats <- df_clean %>%
group_by(Intervention) %>%
summarise(
Mean = mean(Intervention_Questions_Score, na.rm = TRUE),
SD = sd(Intervention_Questions_Score, na.rm = TRUE),
Min = min(Intervention_Questions_Score, na.rm = TRUE),
Max = max(Intervention_Questions_Score, na.rm = TRUE)
)
# Display the summary statistics
print(summary_stats)
# Compute the mean and SD for each group
summary_stats <- df_clean %>%
group_by(Intervention) %>%
summarise(
Mean = mean(Intervention_Questions_Score, na.rm = TRUE),
SD = sd(Intervention_Questions_Score, na.rm = TRUE)
)
# Merge the summary statistics back with the original data
df_clean <- df_clean %>%
left_join(summary_stats, by = "Intervention") %>%
mutate(
Is_Outlier = Intervention_Questions_Score < (Mean - 2 * SD) | Intervention_Questions_Score > (Mean + 2 * SD)
) %>%
select(-Mean, -SD)  # Remove the temporary mean and SD columns
# Check the data with identified outliers
print(head(df_clean))
# Ensure 'Intervention_Questions_Score' is numeric and remove invalid rows
df$Intervention_Questions_Score <- as.numeric(df$Intervention_Questions_Score)
df_clean <- na.omit(df)  # Remove rows with NA in any column
# Generate summary statistics for 'Intervention_Questions_Score' by 'Intervention'
library(dplyr)
summary_stats <- df_clean %>%
group_by(Intervention) %>%
summarise(
Mean = mean(Intervention_Questions_Score, na.rm = TRUE),
SD = sd(Intervention_Questions_Score, na.rm = TRUE),
Min = min(Intervention_Questions_Score, na.rm = TRUE),
Max = max(Intervention_Questions_Score, na.rm = TRUE)
)
# Display the summary statistics
print(summary_stats)
# Compute the mean and SD for each group
summary_stats <- df_clean %>%
group_by(Intervention) %>%
summarise(
Mean = mean(Intervention_Questions_Score, na.rm = TRUE),
SD = sd(Intervention_Questions_Score, na.rm = TRUE)
)
# Merge the summary statistics back with the original data
df_clean <- df_clean %>%
left_join(summary_stats, by = "Intervention") %>%
mutate(
Is_Outlier = Intervention_Questions_Score < (Mean - 2 * SD) | Intervention_Questions_Score > (Mean + 2 * SD)
) %>%
select(-Mean, -SD)  # Remove the temporary mean and SD columns
# Filter rows where Is_Outlier is TRUE
outliers <- df_clean %>%
filter(Is_Outlier == TRUE)
# Print the outliers
print(outliers)
# Ensure 'Intervention_Questions_Score' is numeric and remove invalid rows
df$Intervention_Questions_Score <- as.numeric(df$Intervention_Questions_Score)
df_clean <- na.omit(df)  # Remove rows with NA in any column
# Generate summary statistics for 'Intervention_Questions_Score' by 'Intervention'
library(dplyr)
summary_stats <- df_clean %>%
group_by(Intervention) %>%
summarise(
Mean = mean(Intervention_Questions_Score, na.rm = TRUE),
SD = sd(Intervention_Questions_Score, na.rm = TRUE),
Min = min(Intervention_Questions_Score, na.rm = TRUE),
Max = max(Intervention_Questions_Score, na.rm = TRUE)
)
# Display the summary statistics
print(summary_stats)
# Compute the mean and SD for each group
summary_stats <- df_clean %>%
group_by(Intervention) %>%
summarise(
Mean = mean(Intervention_Questions_Score, na.rm = TRUE),
SD = sd(Intervention_Questions_Score, na.rm = TRUE)
)
# Merge the summary statistics back with the original data
df_clean <- df_clean %>%
left_join(summary_stats, by = "Intervention") %>%
mutate(
Is_Outlier = Intervention_Questions_Score < (Mean - 2 * SD) | Intervention_Questions_Score > (Mean + 2 * SD)
) %>%
select(-Mean, -SD)  # Remove the temporary mean and SD columns
# Filter rows where Is_Outlier is TRUE
outliers <- df_clean %>%
filter(Is_Outlier == TRUE)
select(Participant)
colnames(df_clean)
# Ensure 'Intervention_Questions_Score' is numeric and remove invalid rows
df$Intervention_Questions_Score <- as.numeric(df$Intervention_Questions_Score)
df_clean <- na.omit(df)  # Remove rows with NA in any column
# Generate summary statistics for 'Intervention_Questions_Score' by 'Intervention'
library(dplyr)
summary_stats <- df_clean %>%
group_by(Intervention) %>%
summarise(
Mean = mean(Intervention_Questions_Score, na.rm = TRUE),
SD = sd(Intervention_Questions_Score, na.rm = TRUE),
Min = min(Intervention_Questions_Score, na.rm = TRUE),
Max = max(Intervention_Questions_Score, na.rm = TRUE)
)
# Display the summary statistics
print(summary_stats)
# Compute the mean and SD for each group
summary_stats <- df_clean %>%
group_by(Intervention) %>%
summarise(
Mean = mean(Intervention_Questions_Score, na.rm = TRUE),
SD = sd(Intervention_Questions_Score, na.rm = TRUE)
)
# Merge the summary statistics back with the original data
df_clean <- df_clean %>%
left_join(summary_stats, by = "Intervention") %>%
mutate(
Is_Outlier = Intervention_Questions_Score < (Mean - 2 * SD) | Intervention_Questions_Score > (Mean + 2 * SD)
) %>%
select(-Mean, -SD)  # Remove the temporary mean and SD columns
# Filter rows where Is_Outlier is TRUE
outliers <- df_clean %>%
filter(Is_Outlier == TRUE)
dplyr::select(Participant)
# Ensure 'Intervention_Questions_Score' is numeric and remove invalid rows
df$Intervention_Questions_Score <- as.numeric(df$Intervention_Questions_Score)
df_clean <- na.omit(df)  # Remove rows with NA in any column
# Generate summary statistics for 'Intervention_Questions_Score' by 'Intervention'
library(dplyr)
summary_stats <- df_clean %>%
group_by(Intervention) %>%
summarise(
Mean = mean(Intervention_Questions_Score, na.rm = TRUE),
SD = sd(Intervention_Questions_Score, na.rm = TRUE),
Min = min(Intervention_Questions_Score, na.rm = TRUE),
Max = max(Intervention_Questions_Score, na.rm = TRUE)
)
# Display the summary statistics
print(summary_stats)
# Compute the mean and SD for each group
summary_stats <- df_clean %>%
group_by(Intervention) %>%
summarise(
Mean = mean(Intervention_Questions_Score, na.rm = TRUE),
SD = sd(Intervention_Questions_Score, na.rm = TRUE)
)
# Merge the summary statistics back with the original data
df_clean <- df_clean %>%
left_join(summary_stats, by = "Intervention") %>%
mutate(
Is_Outlier = Intervention_Questions_Score < (Mean - 2 * SD) | Intervention_Questions_Score > (Mean + 2 * SD)
) %>%
select(-Mean, -SD)  # Remove the temporary mean and SD columns
# Filter rows where Is_Outlier is TRUE
outliers <- df_clean %>%
filter(Is_Outlier == TRUE)
# Print the outliers
print(outliers$Participant)
setwd("C:/Users/Rob/OneDrive/Rob/PhD/Github/FakeNewsIntervention/analysis")
str(df$Intervention)
df$Intervention <- factor(df$Intervention)
str(df$Intervention)
unique(df$Intervention)
#| code-fold: false
df <- read.csv("../data/data.csv")
dfmist <- read.csv("../data/data_mist.csv")
unique(df$Intervention)
m <- lm(MIST_correct_Pretest_covid ~ poly(Political_LiberalConservative, 2),
data=filter(df, !is.na(Political_LiberalConservative)))
df$Intervention <- factor(df$Intervention)
df <- df %>%
mutate(MIST_correct_Pretest_avg = (MIST_correct_Pretest_covid + MIST_correct_Pretest_general) / 2)
# Chunk 1
#| message: false
#| warning: false
library(emmeans)
library(tidyverse)
library(easystats)
library(patchwork)
library(ggside)
# Chunk 2
#| code-fold: false
df <- read.csv("../data/data.csv")
dfmist <- read.csv("../data/data_mist.csv")
# Chunk 3
m <- lm(MIST_correct_Pretest_covid ~ poly(Political_LiberalConservative, 2),
data=filter(df, !is.na(Political_LiberalConservative)))
display(parameters(m))
estimate_relation(m, length=30) |>
ggplot(aes(x=Political_LiberalConservative, y=Predicted)) +
# geom_jitter(data=filter(df, !is.na(Political_LiberalConservative)),
#             aes(y=MIST_correct_Pretest_covid), alpha=0.2, size=3) +
geom_ribbon(aes(ymin=CI_low, ymax=CI_high), alpha=0.2) +
geom_line() +
labs(y="MIST-Covid (% Correct Pretest)", x="Political Identification")
# Chunk 4
# Categorical
m <- lm(MIST_correct_Pretest_covid ~ Political_Affiliation,
data=filter(df, Political_Affiliation != "None or Independent"))
display(estimate_contrasts(m, contrast="Political_Affiliation", p_adjust="none"))
estimate_means(m, by = c("Political_Affiliation")) |>
ggplot(aes(x=Political_Affiliation, y=Mean)) +
geom_line(aes(group=1)) +
geom_pointrange(aes(ymin=CI_low, ymax=CI_high)) +
labs(y="MIST-Covid (% Correct Pretest)", x="Political Affiliation")
# Chunk 5
# model <- glmmTMB::glmmTMB(Correct ~ Intervention * Condition * Topic + (1|Participant) + (1|QuestionID),
#                           data=dfmist, family=binomial())
#
# model_means <- modelbased::estimate_means(model, by=c("Intervention", "Condition", "Topic"))
#
# model_means |>
#   mutate(Condition = fct_rev(Condition)) |>
#   ggplot(aes(x=Condition, y=Probability, color=Intervention)) +
#   geom_line(aes(group=Intervention), position=position_dodge(width=0.1)) +
#   geom_pointrange(aes(ymin=CI_low, ymax=CI_high), position=position_dodge(width=0.1)) +
#   facet_wrap(~Topic)
# Chunk 1
#| message: false
#| warning: false
library(emmeans)
library(tidyverse)
library(easystats)
library(patchwork)
library(ggside)
# Chunk 2
#| code-fold: false
df <- read.csv("../data/data.csv")
dfmist <- read.csv("../data/data_mist.csv")
# Chunk 3
m <- lm(MIST_correct_Pretest_covid ~ poly(Political_LiberalConservative, 2),
data=filter(df, !is.na(Political_LiberalConservative)))
display(parameters(m))
estimate_relation(m, length=30) |>
ggplot(aes(x=Political_LiberalConservative, y=Predicted)) +
# geom_jitter(data=filter(df, !is.na(Political_LiberalConservative)),
#             aes(y=MIST_correct_Pretest_covid), alpha=0.2, size=3) +
geom_ribbon(aes(ymin=CI_low, ymax=CI_high), alpha=0.2) +
geom_line() +
labs(y="MIST-Covid (% Correct Pretest)", x="Political Identification")
# Chunk 4
# Categorical
m <- lm(MIST_correct_Pretest_covid ~ Political_Affiliation,
data=filter(df, Political_Affiliation != "None or Independent"))
display(estimate_contrasts(m, contrast="Political_Affiliation", p_adjust="none"))
estimate_means(m, by = c("Political_Affiliation")) |>
ggplot(aes(x=Political_Affiliation, y=Mean)) +
geom_line(aes(group=1)) +
geom_pointrange(aes(ymin=CI_low, ymax=CI_high)) +
labs(y="MIST-Covid (% Correct Pretest)", x="Political Affiliation")
# Chunk 5
# model <- glmmTMB::glmmTMB(Correct ~ Intervention * Condition * Topic + (1|Participant) + (1|QuestionID),
#                           data=dfmist, family=binomial())
#
# model_means <- modelbased::estimate_means(model, by=c("Intervention", "Condition", "Topic"))
#
# model_means |>
#   mutate(Condition = fct_rev(Condition)) |>
#   ggplot(aes(x=Condition, y=Probability, color=Intervention)) +
#   geom_line(aes(group=Intervention), position=position_dodge(width=0.1)) +
#   geom_pointrange(aes(ymin=CI_low, ymax=CI_high), position=position_dodge(width=0.1)) +
#   facet_wrap(~Topic)
# Chunk 6
df$Intervention <- factor(df$Intervention)
df <- df %>%
mutate(MIST_correct_Pretest_avg = (MIST_correct_Pretest_covid + MIST_correct_Pretest_general) / 2)
m <- lm(MIST_correct_Diff ~ Intervention/MIST_correct_Pretest_avg,
data=filter(df, !is.na(MIST_correct_Pretest_covid)))
display(parameters(m))
estimate_relation(m, length=30) |>
ggplot(aes(x=MIST_correct_Pretest_covid, y=Predicted)) +
# geom_jitter(data=filter(df, !is.na(Political_LiberalConservative)),
#             aes(y=MIST_correct_Pretest_covid), alpha=0.2, size=3) +
geom_ribbon(aes(ymin=CI_low, ymax=CI_high, fill=Intervention), alpha=0.2) +
geom_line(aes(color=Intervention)) +
labs(x="MIST (% Correct pre-test)", y="MIST (% Correct difference Post-Pre)")
unique(df$Intervention)
str(df$Intervention)
str(df$Intervention)
sum(is.na(df$MIST_correct_Pretest_avg))  # To check for any missing values
df <- df %>%
mutate(MIST_correct_Pretest_avg = (MIST_correct_Pretest_covid + MIST_correct_Pretest_general) / 2)
m <- lm(MIST_correct_Diff ~ Intervention * MIST_correct_Pretest_covid + Intervention * MIST_correct_Pretest_general,
data = filter(df, !is.na(MIST_correct_Pretest_covid) & !is.na(MIST_correct_Pretest_general)))
display(parameters(m))
estimate_relation(m, length=30) |>
ggplot(aes(x=MIST_correct_Pretest_covid, y=Predicted)) +
# geom_jitter(data=filter(df, !is.na(Political_LiberalConservative)),
#             aes(y=MIST_correct_Pretest_covid), alpha=0.2, size=3) +
geom_ribbon(aes(ymin=CI_low, ymax=CI_high, fill=Intervention), alpha=0.2) +
geom_line(aes(color=Intervention)) +
labs(x="MIST (% Correct pre-test)", y="MIST (% Correct difference Post-Pre)")
df <- df %>%
mutate(MIST_correct_Pretest_avg = (MIST_correct_Pretest_covid + MIST_correct_Pretest_general) / 2)
m <- lm(MIST_correct_Diff ~ Intervention/MIST_correct_Pretest_avg,
data=filter(df, !is.na(MIST_correct_Pretest_covid)))
display(parameters(m))
estimate_relation(m, length=30) |>
ggplot(aes(x=MIST_correct_Pretest_covid, y=Predicted)) +
# geom_jitter(data=filter(df, !is.na(Political_LiberalConservative)),
#             aes(y=MIST_correct_Pretest_covid), alpha=0.2, size=3) +
geom_ribbon(aes(ymin=CI_low, ymax=CI_high, fill=Intervention), alpha=0.2) +
geom_line(aes(color=Intervention)) +
labs(x="MIST (% Correct pre-test)", y="MIST (% Correct difference Post-Pre)")
m <- lm(MIST_correct_Diff ~ Intervention * MIST_correct_Pretest_covid + Intervention * MIST_correct_Pretest_general,
data = filter(df, !is.na(MIST_correct_Pretest_covid) & !is.na(MIST_correct_Pretest_general)))
display(parameters(m))
estimate_relation(m, length=30) |>
ggplot(aes(x=MIST_correct_Pretest_covid, y=Predicted)) +
# geom_jitter(data=filter(df, !is.na(Political_LiberalConservative)),
#             aes(y=MIST_correct_Pretest_covid), alpha=0.2, size=3) +
geom_ribbon(aes(ymin=CI_low, ymax=CI_high, fill=Intervention), alpha=0.2) +
geom_line(aes(color=Intervention)) +
labs(x="MIST (% Correct pre-test)", y="MIST (% Correct difference Post-Pre)")
model <- glmmTMB::glmmTMB(Correct ~ QuestionType / Topic  / (Condition * Intervention) + (1|Participant), data=dfmist, family="binomial")
estimate_relation(model) |>
ggplot(aes(x=Condition, y=Predicted)) +
geom_line(aes(color=Intervention, group=Intervention)) +
geom_pointrange(aes(color=Intervention, ymin=CI_low, ymax=CI_high)) +
facet_wrap(~QuestionType * Topic, scales="free")
estimate_contrasts(model, contrast=c("Condition"), by=c("Topic","Intervention"))
